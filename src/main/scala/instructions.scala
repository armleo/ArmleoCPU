package armleocpu


import chisel3._
import chisel3.util._

object Instructions {
  def LUI                 = BitPat("b?????????????????????????0110111")
  def AUIPC               = BitPat("b?????????????????????????0010111")
  def JAL                 = BitPat("b?????????????????????????1101111")
  def JALR                = BitPat("b?????????????????000?????1100111")

  def BRANCH              = BitPat("b?????????????????????????1100011")
  def BEQ                 = BitPat("b?????????????????000?????1100011")
  def BNE                 = BitPat("b?????????????????001?????1100011")
  def BLT                 = BitPat("b?????????????????100?????1100011")
  def BGE                 = BitPat("b?????????????????101?????1100011")
  def BLTU                = BitPat("b?????????????????110?????1100011")
  def BGEU                = BitPat("b?????????????????111?????1100011")

  // MEMORY
  def LOAD                = BitPat("b?????????????????????????0000011")
  def LB                  = BitPat("b?????????????????000?????0000011")
  def LH                  = BitPat("b?????????????????001?????0000011")
  def LW                  = BitPat("b?????????????????010?????0000011")
//  def LD                  = BitPat("b?????????????????011?????0000011")
  def LBU                 = BitPat("b?????????????????100?????0000011")
  def LHU                 = BitPat("b?????????????????101?????0000011")
//  def LWU                 = BitPat("b?????????????????110?????0000011")

  def STORE               = BitPat("b?????????????????????????0100011")
  def SB                  = BitPat("b?????????????????000?????0100011")
  def SH                  = BitPat("b?????????????????001?????0100011")
  def SW                  = BitPat("b?????????????????010?????0100011")
//  def SD                  = BitPat("b?????????????????011?????0100011")

  // Arithmetic
  def ADD                 = BitPat("b0000000??????????000?????0110011")
//  def ADDW                = BitPat("b0000000??????????000?????0111011")
  def SUB                 = BitPat("b0100000??????????000?????0110011")
//  def SUBW                = BitPat("b0100000??????????000?????0111011")

  // logical
  def AND                 = BitPat("b0000000??????????111?????0110011")
  def OR                  = BitPat("b0000000??????????110?????0110011")
  def XOR                 = BitPat("b0000000??????????100?????0110011")

  // shift
  def SLL                 = BitPat("b0000000??????????001?????0110011")
  def SLLW                = BitPat("b0000000??????????001?????0111011")
  def SRA                 = BitPat("b0100000??????????101?????0110011")
  def SRAW                = BitPat("b0100000??????????101?????0111011")
  def SRL                 = BitPat("b0000000??????????101?????0110011")
  def SRLW                = BitPat("b0000000??????????101?????0111011")

  // SLT/SLTU
  def SLT                 = BitPat("b0000000??????????010?????0110011")
  def SLTU                = BitPat("b0000000??????????011?????0110011")

  // Arithmetic imm
  def ADDI                = BitPat("b?????????????????000?????0010011")
//  def ADDIW               = BitPat("b?????????????????000?????0011011")

  // logical imm
  def ANDI                = BitPat("b?????????????????111?????0010011")
  def ORI                 = BitPat("b?????????????????110?????0010011")
  def XORI                = BitPat("b?????????????????100?????0010011")

  // Shifts imm
  def SLLI                = BitPat("b000000???????????001?????0010011")
//  def SLLIW               = BitPat("b0000000??????????001?????0011011")
  def SRAI                = BitPat("b010000???????????101?????0010011")
//  def SRAIW               = BitPat("b0100000??????????101?????0011011")
  def SRLI                = BitPat("b000000???????????101?????0010011")
//  def SRLIW               = BitPat("b0000000??????????101?????0011011")

  // SLTI/SLTIU imm
  def SLTI                = BitPat("b?????????????????010?????0010011")
  def SLTIU               = BitPat("b?????????????????011?????0010011")

  /*
  // MULDIV
  def MUL                 = BitPat("b0000001??????????000?????0110011")
  def MULH                = BitPat("b0000001??????????001?????0110011")
  def MULHSU              = BitPat("b0000001??????????010?????0110011")
  def MULHU               = BitPat("b0000001??????????011?????0110011")

  def DIV                 = BitPat("b0000001??????????100?????0110011")
  def DIVU                = BitPat("b0000001??????????101?????0110011")
  def REM                 = BitPat("b0000001??????????110?????0110011")
  def REMU                = BitPat("b0000001??????????111?????0110011")

  def MULW                = BitPat("b0000001??????????000?????0111011")
  def REMUW               = BitPat("b0000001??????????111?????0111011")
  def REMW                = BitPat("b0000001??????????110?????0111011")
  def DIVUW               = BitPat("b0000001??????????101?????0111011")
  def DIVW                = BitPat("b0000001??????????100?????0111011")
  */

  def EBREAK              = BitPat("b00000000000100000000000001110011")
  def ECALL               = BitPat("b00000000000000000000000001110011")
  def MRET                = BitPat("b00110000001000000000000001110011")
  def SRET                = BitPat("b00010000001000000000000001110011")


  def FENCE               = BitPat("b?????????????????000?????0001111")
  def FENCE_I             = BitPat("b?????????????????001?????0001111")
  def SFENCE_VMA          = BitPat("b0001001??????????000000001110011")

  // ATOMIC

  //def LR_D                = BitPat("b00010??00000?????011?????0101111")
  def LR_W                = BitPat("b00010??00000?????010?????0101111")
  //def SC_D                = BitPat("b00011????????????011?????0101111")
  def SC_W                = BitPat("b00011????????????010?????0101111")

  // AMO*
  def AMOADD_W            = BitPat("b00000????????????010?????0101111")
  def AMOAND_W            = BitPat("b01100????????????010?????0101111")
  def AMOXOR_W            = BitPat("b00100????????????010?????0101111")
  def AMOOR_W             = BitPat("b01000????????????010?????0101111")
  def AMOMAX_W            = BitPat("b10100????????????010?????0101111")
  def AMOMAXU_W           = BitPat("b11100????????????010?????0101111")
  def AMOMIN_W            = BitPat("b10000????????????010?????0101111")
  def AMOMINU_W           = BitPat("b11000????????????010?????0101111")
  def AMOSWAP_W           = BitPat("b00001????????????010?????0101111")

  /*
  def AMOADD_D            = BitPat("b00000????????????011?????0101111")
  def AMOAND_D            = BitPat("b01100????????????011?????0101111")
  def AMOOR_D             = BitPat("b01000????????????011?????0101111")
  def AMOXOR_D            = BitPat("b00100????????????011?????0101111")
  def AMOMAX_D            = BitPat("b10100????????????011?????0101111")
  def AMOMAXU_D           = BitPat("b11100????????????011?????0101111")
  def AMOMIN_D            = BitPat("b10000????????????011?????0101111")
  def AMOMINU_D           = BitPat("b11000????????????011?????0101111")
  def AMOSWAP_D           = BitPat("b00001????????????011?????0101111")
  */

  // CSR
  def CSRRW               = BitPat("b?????????????????001?????1110011")
  def CSRRWI              = BitPat("b?????????????????101?????1110011")
  def CSRRS               = BitPat("b?????????????????010?????1110011")
  def CSRRSI              = BitPat("b?????????????????110?????1110011")
  def CSRRC               = BitPat("b?????????????????011?????1110011")
  def CSRRCI              = BitPat("b?????????????????111?????1110011")


}
